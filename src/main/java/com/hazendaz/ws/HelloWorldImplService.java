package com.hazendaz.ws;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 2.5.1 2013-09-16T20:31:46.909-04:00 Generated source version: 2.5.1
 * 
 */
@WebServiceClient(name = "HelloWorldImplService", wsdlLocation = "http://localhost:8080/fileupload/hello?wsdl", targetNamespace = "http://ws.hazendaz.com/")
public class HelloWorldImplService extends Service {

    public static final URL   WSDL_LOCATION;

    public static final QName SERVICE            = new QName("http://ws.hazendaz.com/", "HelloWorldImplService");
    public static final QName HelloWorldImplPort = new QName("http://ws.hazendaz.com/", "HelloWorldImplPort");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8080/fileupload/hello?wsdl");
        } catch (final MalformedURLException e) {
            java.util.logging.Logger.getLogger(HelloWorldImplService.class.getName()).log(java.util.logging.Level.INFO,
                    "Can not initialize the default wsdl from {0}", "http://localhost:8080/fileupload/hello?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public HelloWorldImplService() {
        super(HelloWorldImplService.WSDL_LOCATION, HelloWorldImplService.SERVICE);
    }

    public HelloWorldImplService(final URL wsdlLocation) {
        super(wsdlLocation, HelloWorldImplService.SERVICE);
    }

    public HelloWorldImplService(final URL wsdlLocation, final QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    /**
     * 
     * @return returns HelloWorld
     */
    @WebEndpoint(name = "HelloWorldImplPort")
    public HelloWorld getHelloWorldImplPort() {
        return super.getPort(HelloWorldImplService.HelloWorldImplPort, HelloWorld.class);
    }

    /**
     * 
     * @param features
     *            A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy. Supported features not in
     *            the <code>features</code> parameter will have their default values.
     * @return returns HelloWorld
     */
    @WebEndpoint(name = "HelloWorldImplPort")
    public HelloWorld getHelloWorldImplPort(final WebServiceFeature... features) {
        return super.getPort(HelloWorldImplService.HelloWorldImplPort, HelloWorld.class, features);
    }

}
